#!/usr/bin/env python

from json import dumps
from re import compile as recompile
from os import walk
from os.path import join, normpath
from sys import argv

class FileSystemConverter( object ):

	def __init__( self, basedir = '.', **patterns ):
		_adjust = lambda _: recompile( join( self.basedir, patterns[ _ ] ) ) if _ in patterns else None
		self.basedir = normpath( basedir )
		self.signature_pattern = _adjust( 'signature' )
		self.source_pattern = _adjust( 'source' )
		self.case_pattern = _adjust( 'case' )
		self.exercise_names = set()
		self.results = {}

	def ensure_result( self, uid, exercise = None ):
		if not uid in self.results:
			self.results[ uid ] = {
				'signature': [ uid, uid, None ],
				'exercises': {}
			}
		if exercise and not exercise in self.results[ uid ][ 'exercises' ]:
			self.results[ uid ][ 'exercises' ][ exercise ] = {
				'sources': {},
				'cases': []
			}

	def signature( self, path ):
		if not self.signature_pattern: return None
		match = self.signature_pattern.match( path )
		if match:
			with open( path, 'r' ) as f: f.read().strip().split()
			return match.group( 'uid' ), signature
		return None

	def exercise( self, path ):
		if not self.source_pattern: return
		match = self.source_pattern.match( path )
		if match:
			self.exercise_names.add( match.group( 'exercise' ) )
			with open( path, 'r' ) as f: content = f.read()
			return match.group( 'uid' ), match.group( 'exercise' ), match.group( 'source' ), content
		return None

	def case( self, path ):
		if not self.case_pattern: return None
		match = self.case_pattern.match( path )
		if match:
			case = {
				'name': '',
				'stdout': '',
				'stderr': '',
				'failure': '',
				'error': '',
				'type': ''
			}
			return match.group( 'uid' ), match.group( 'exercise' ), match.group( 'name' ), case
		return None

	def scan( self ):
		for root, dirs, files in walk( self.basedir ):
			for name in files:
				path = join( root, name )
				signature = self.signature( path )
				if signature:
					uid, signature = signature
					self.ensure_result( self, uid )
					self.results[ uid ][ 'signature' ] = signature
					continue
				exercise = self.exercise( path )
				if exercise:
					uid, exercise, source, content = exercise
					self.ensure_result( uid, exercise )
					self.results[ uid ][ 'exercises' ][ exercise ][ 'sources' ][ source ] = content
					continue
				case = self.case( path )
				if case:
					uid, exercise, name, case = case
					self.ensure_result( uid, exercise )
					self.results[ uid ][ 'exercises' ][ exercise ][ 'cases' ][ name ] = case

	def tojson( self ):
		for uid, res in self.results.items():
			for name in self.exercise_names:
				if name not in self.results[ uid ][ 'exercises' ]:
					self.results[ uid ][ 'exercises' ][ name ] = { 'sources': {}, 'cases': [] }
		return dumps( self.results.values() )

if __name__ == '__main__':
	boldi = FileSystemConverter( argv[ 1 ], source = r'(?P<uid>.*)/(?P<source>(?P<exercise>.*)\.java)' )
	boldi.scan()
	print boldi.tojson()
